From Martin Fowler article: 
https://martinfowler.com/articles/injection.html#InversionOfControl
 
Early user interfaces were controlled by the application program. 
You would have a sequence of commands like "Enter name", "enter address"; 
your program would drive the prompts and pick up a response to each one.

With graphical (or even screen based) UIs the UI framework would contain 
this main loop and your program instea
d provided event handlers for the various fields on the screen. 
The main control of the program was inverted, moved away from you to the framework.


For example, in a script menu, you would force user to follow sequence of action you programmed:

print "Enter prm1"
read prm1
print "Enter prm2"
read prm2
....
print "Enter prmN"
read prmN
...
do something /check something for 
....
Next menue

controlling the flow of user interaction.

In a GUI program it is a user who controls the flow:

when the user types in field Prm1 , store it in Prm1
when the user types in field Prm2, store it in Prm2
when the user types in field PrmN,  store it in PrmN

when all entered or when the user clicks clicks "Save",
 
So now control is inverted... instead of the computer accepting user input in a fixed order, 
the user controls the order in which the data is entered, and when the data can be saved.

Kyle Simpson example with Callbacks
There's part of my program that I'm in control of executing. And then, there's another portion of my code that I'm not in control of executing.
And the way that we express that is to take the first half of my program that executes now and the second half of my code that executes in the callback, and when I give that call back to somebody else. That's what inverts the control and it puts them in control of when and in what manner to execute the second half of my program.
You did not realize that there was a trust point when you passed in a callback. When you passed in a callback you are trusting that that callback will be not called too many times or too few times or not called at all.


